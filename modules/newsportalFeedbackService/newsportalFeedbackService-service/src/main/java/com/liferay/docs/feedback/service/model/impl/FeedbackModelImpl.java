/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.feedback.service.model.impl;

import com.liferay.docs.feedback.service.model.Feedback;
import com.liferay.docs.feedback.service.model.FeedbackModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Feedback service. Represents a row in the &quot;FB_Feedback&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FeedbackModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FeedbackImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FeedbackImpl
 * @generated
 */
@JSON(strict = true)
public class FeedbackModelImpl
	extends BaseModelImpl<Feedback> implements FeedbackModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a feedback model instance should use the <code>Feedback</code> interface instead.
	 */
	public static final String TABLE_NAME = "FB_Feedback";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"feedbackId", Types.BIGINT},
		{"feedbackDate", Types.TIMESTAMP}, {"feedbackText", Types.VARCHAR},
		{"feedbackSubject", Types.VARCHAR}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feedbackId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("feedbackDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("feedbackText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feedbackSubject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FB_Feedback (uuid_ VARCHAR(75) null,feedbackId LONG not null primary key,feedbackDate DATE null,feedbackText VARCHAR(75) null,feedbackSubject VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG)";

	public static final String TABLE_SQL_DROP = "drop table FB_Feedback";

	public static final String ORDER_BY_JPQL =
		" ORDER BY feedback.feedbackId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FB_Feedback.feedbackId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FEEDBACKTEXT_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FEEDBACKID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FeedbackModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _feedbackId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFeedbackId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _feedbackId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Feedback.class;
	}

	@Override
	public String getModelClassName() {
		return Feedback.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Feedback, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Feedback, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Feedback, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Feedback)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Feedback, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Feedback, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Feedback)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Feedback, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Feedback, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Feedback, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Feedback, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Feedback, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Feedback, Object>>();
		Map<String, BiConsumer<Feedback, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Feedback, ?>>();

		attributeGetterFunctions.put("uuid", Feedback::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Feedback, String>)Feedback::setUuid);
		attributeGetterFunctions.put("feedbackId", Feedback::getFeedbackId);
		attributeSetterBiConsumers.put(
			"feedbackId", (BiConsumer<Feedback, Long>)Feedback::setFeedbackId);
		attributeGetterFunctions.put("feedbackDate", Feedback::getFeedbackDate);
		attributeSetterBiConsumers.put(
			"feedbackDate",
			(BiConsumer<Feedback, Date>)Feedback::setFeedbackDate);
		attributeGetterFunctions.put("feedbackText", Feedback::getFeedbackText);
		attributeSetterBiConsumers.put(
			"feedbackText",
			(BiConsumer<Feedback, String>)Feedback::setFeedbackText);
		attributeGetterFunctions.put(
			"feedbackSubject", Feedback::getFeedbackSubject);
		attributeSetterBiConsumers.put(
			"feedbackSubject",
			(BiConsumer<Feedback, String>)Feedback::setFeedbackSubject);
		attributeGetterFunctions.put("companyId", Feedback::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Feedback, Long>)Feedback::setCompanyId);
		attributeGetterFunctions.put("groupId", Feedback::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Feedback, Long>)Feedback::setGroupId);
		attributeGetterFunctions.put("userId", Feedback::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Feedback, Long>)Feedback::setUserId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getFeedbackId() {
		return _feedbackId;
	}

	@Override
	public void setFeedbackId(long feedbackId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feedbackId = feedbackId;
	}

	@JSON
	@Override
	public Date getFeedbackDate() {
		return _feedbackDate;
	}

	@Override
	public void setFeedbackDate(Date feedbackDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feedbackDate = feedbackDate;
	}

	@JSON
	@Override
	public String getFeedbackText() {
		if (_feedbackText == null) {
			return "";
		}
		else {
			return _feedbackText;
		}
	}

	@Override
	public void setFeedbackText(String feedbackText) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feedbackText = feedbackText;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFeedbackText() {
		return getColumnOriginalValue("feedbackText");
	}

	@JSON
	@Override
	public String getFeedbackSubject() {
		if (_feedbackSubject == null) {
			return "";
		}
		else {
			return _feedbackSubject;
		}
	}

	@Override
	public void setFeedbackSubject(String feedbackSubject) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_feedbackSubject = feedbackSubject;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Feedback.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Feedback toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Feedback>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FeedbackImpl feedbackImpl = new FeedbackImpl();

		feedbackImpl.setUuid(getUuid());
		feedbackImpl.setFeedbackId(getFeedbackId());
		feedbackImpl.setFeedbackDate(getFeedbackDate());
		feedbackImpl.setFeedbackText(getFeedbackText());
		feedbackImpl.setFeedbackSubject(getFeedbackSubject());
		feedbackImpl.setCompanyId(getCompanyId());
		feedbackImpl.setGroupId(getGroupId());
		feedbackImpl.setUserId(getUserId());

		feedbackImpl.resetOriginalValues();

		return feedbackImpl;
	}

	@Override
	public Feedback cloneWithOriginalValues() {
		FeedbackImpl feedbackImpl = new FeedbackImpl();

		feedbackImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		feedbackImpl.setFeedbackId(
			this.<Long>getColumnOriginalValue("feedbackId"));
		feedbackImpl.setFeedbackDate(
			this.<Date>getColumnOriginalValue("feedbackDate"));
		feedbackImpl.setFeedbackText(
			this.<String>getColumnOriginalValue("feedbackText"));
		feedbackImpl.setFeedbackSubject(
			this.<String>getColumnOriginalValue("feedbackSubject"));
		feedbackImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		feedbackImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		feedbackImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));

		return feedbackImpl;
	}

	@Override
	public int compareTo(Feedback feedback) {
		int value = 0;

		if (getFeedbackId() < feedback.getFeedbackId()) {
			value = -1;
		}
		else if (getFeedbackId() > feedback.getFeedbackId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Feedback)) {
			return false;
		}

		Feedback feedback = (Feedback)object;

		long primaryKey = feedback.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Feedback> toCacheModel() {
		FeedbackCacheModel feedbackCacheModel = new FeedbackCacheModel();

		feedbackCacheModel.uuid = getUuid();

		String uuid = feedbackCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			feedbackCacheModel.uuid = null;
		}

		feedbackCacheModel.feedbackId = getFeedbackId();

		Date feedbackDate = getFeedbackDate();

		if (feedbackDate != null) {
			feedbackCacheModel.feedbackDate = feedbackDate.getTime();
		}
		else {
			feedbackCacheModel.feedbackDate = Long.MIN_VALUE;
		}

		feedbackCacheModel.feedbackText = getFeedbackText();

		String feedbackText = feedbackCacheModel.feedbackText;

		if ((feedbackText != null) && (feedbackText.length() == 0)) {
			feedbackCacheModel.feedbackText = null;
		}

		feedbackCacheModel.feedbackSubject = getFeedbackSubject();

		String feedbackSubject = feedbackCacheModel.feedbackSubject;

		if ((feedbackSubject != null) && (feedbackSubject.length() == 0)) {
			feedbackCacheModel.feedbackSubject = null;
		}

		feedbackCacheModel.companyId = getCompanyId();

		feedbackCacheModel.groupId = getGroupId();

		feedbackCacheModel.userId = getUserId();

		return feedbackCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Feedback, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Feedback, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Feedback, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Feedback)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Feedback, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Feedback, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Feedback, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Feedback)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Feedback>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Feedback.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _feedbackId;
	private Date _feedbackDate;
	private String _feedbackText;
	private String _feedbackSubject;
	private long _companyId;
	private long _groupId;
	private long _userId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Feedback, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Feedback)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("feedbackId", _feedbackId);
		_columnOriginalValues.put("feedbackDate", _feedbackDate);
		_columnOriginalValues.put("feedbackText", _feedbackText);
		_columnOriginalValues.put("feedbackSubject", _feedbackSubject);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("userId", _userId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("feedbackId", 2L);

		columnBitmasks.put("feedbackDate", 4L);

		columnBitmasks.put("feedbackText", 8L);

		columnBitmasks.put("feedbackSubject", 16L);

		columnBitmasks.put("companyId", 32L);

		columnBitmasks.put("groupId", 64L);

		columnBitmasks.put("userId", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Feedback _escapedModel;

}